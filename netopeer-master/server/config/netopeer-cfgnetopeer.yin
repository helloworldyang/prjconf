<?xml version="1.0" encoding="UTF-8"?>
<module xmlns="urn:ietf:params:xml:ns:yang:yin:1" xmlns:cfgnetopeer="urn:cesnet:tmc:netopeer:1.0" xmlns:x509c2n="urn:ietf:params:xml:ns:yang:ietf-x509-cert-to-name" name="netopeer-cfgnetopeer">
  <namespace uri="urn:cesnet:tmc:netopeer:1.0"/>
  <prefix value="cfgnetopeer"/>
  <import module="ietf-x509-cert-to-name">
    <prefix value="x509c2n"/>
  </import>
  <organization>
    <text>CESNET, z.s.p.o.</text>
  </organization>
  <contact>
    <text>mvasko@cesnet.cz,
 dkupka@cesnet.cz</text>
  </contact>
  <description>
    <text>Module specifying Netopeer module data model and RPC operation.</text>
  </description>
  <revision date="2015-05-19">
    <description>
      <text>client-removal-time removed, dynamic modules are an optional feature.</text>
    </description>
  </revision>
  <revision date="2015-01-15">
    <description>
      <text>Netopeer-specific NETCONF server options added.</text>
    </description>
  </revision>
  <revision date="2013-02-14">
    <description>
      <text>Modules are now configurable. Except implemented-rpcs which depends on module data model.</text>
    </description>
  </revision>
  <revision date="2012-11-13">
    <description>
      <text>Removed parts implemented by library (RFC6022).</text>
    </description>
  </revision>
  <revision date="2011-10-20">
    <description>
      <text>Initial revision</text>
    </description>
  </revision>
  <feature name="ssh">
    <description>
      <text>Enables SSH transport.</text>
    </description>
  </feature>
  <feature name="tls">
    <description>
      <text>Enables TLS transport.</text>
    </description>
  </feature>
  <feature name="dynamic-modules">
    <description>
      <text>Enables dynamic loading and unloading
 of transAPI modules.</text>
    </description>
  </feature>
  <container name="netopeer">
    <leaf name="hello-timeout">
      <type name="uint32">
        <range value="0 | 10 .. 3600"/>
      </type>
      <units name="seconds"/>
      <default value="600"/>
      <description>
        <text>Specifies the number of seconds that a session
   may exist before the hello PDU is received.
   A session will be dropped if no hello PDU
   is received before this number of seconds elapses.

   If this parameter is set to zero, then the server
   will wait forever for a hello message, and not
   drop any sessions stuck in 'hello-wait' state.

   Setting this parameter to zero may permit
   denial of service attacks, since only a limited
   number of concurrent sessions are supported
   by the server.</text>
      </description>
    </leaf>
    <leaf name="idle-timeout">
      <type name="uint32">
        <range value="0 | 10 .. 360000"/>
      </type>
      <units name="seconds"/>
      <default value="3600"/>
      <description>
        <text>Specifies the number of seconds that a session
   may remain idle without issuing any RPC requests.
   A session will be dropped if it is idle for an
   interval longer than this number of seconds.

   Sessions that have a notification subscription
   active are never dropped.

   If this parameter is set to zero, then the server
   will never drop a session because it is idle.</text>
      </description>
    </leaf>
    <leaf name="max-sessions">
      <type name="uint16">
        <range value="0 .. 1024"/>
      </type>
      <default value="8"/>
      <description>
        <text>Specifies the maximum number of concurrent sessions
  that can be active at one time.  The value 0 indicates
  that no artificial session limit should be used.</text>
      </description>
    </leaf>
    <leaf name="response-time">
      <type name="uint16"/>
      <units name="miliseconds"/>
      <default value="50"/>
      <description>
        <text>Maximum number of miliseconds any client request
 will almost certainly be responded to.</text>
      </description>
    </leaf>
    <container name="ssh">
      <if-feature name="ssh"/>
      <description>
        <text>Netopeer SSH options.</text>
      </description>
      <container name="server-keys">
        <leaf name="rsa-key">
          <type name="string"/>
          <default value="/etc/ssh/ssh_host_rsa_key"/>
          <description>
            <text>Path to a private RSA key that will be
 used by clients for server identity
 confirmation.</text>
          </description>
        </leaf>
        <leaf name="dsa-key">
          <type name="string"/>
          <description>
            <text>Path to a private DSA key that will be
 used by clients for server identity
 confirmation.</text>
          </description>
        </leaf>
      </container>
      <container name="client-auth-keys">
        <list name="client-auth-key">
          <key value="path"/>
          <leaf name="path">
            <type name="string"/>
            <description>
              <text>Path to the public key.</text>
            </description>
          </leaf>
          <leaf name="username">
            <type name="string"/>
            <mandatory value="true"/>
            <description>
              <text>SSH and NETCONF username to be used
 for the session authenticated with
 this public key.</text>
            </description>
          </leaf>
        </list>
      </container>
      <leaf name="password-auth-enabled">
        <type name="boolean"/>
        <default value="true"/>
        <description>
          <text>Decides whether clients can use the 'password'
 SSH authentication method (RFC 4252).</text>
        </description>
      </leaf>
      <leaf name="auth-attempts">
        <type name="uint8">
          <range value="1 .. max"/>
        </type>
        <default value="3"/>
        <description>
          <text>Maximum failed authentication attempts after
 which the client is dropped.</text>
        </description>
      </leaf>
      <leaf name="auth-timeout">
        <type name="uint16">
          <range value="5 .. max"/>
        </type>
        <units name="seconds"/>
        <default value="10"/>
        <description>
          <text>Maximum number of seconds a client is allowed
 for authentication after which it is dropped.</text>
        </description>
      </leaf>
    </container>
    <container name="tls">
      <if-feature name="tls"/>
      <description>
        <text>Netopeer TLS options.</text>
      </description>
      <leaf name="server-cert">
        <type name="binary"/>
        <description>
          <text>Server certificate (in base64-encoded DER) presented to clients.</text>
        </description>
      </leaf>
      <container name="server-key">
        <leaf name="key-data">
          <type name="binary"/>
          <mandatory value="true"/>
          <description>
            <text>Server private key (in base64-encoded DER) matching
 the server certificate.</text>
          </description>
        </leaf>
        <leaf name="key-type">
          <type name="enumeration">
            <enum name="DSA">
              <value value="0"/>
            </enum>
            <enum name="RSA">
              <value value="1"/>
            </enum>
          </type>
          <mandatory value="true"/>
          <description>
            <text>The type of the server private key.</text>
          </description>
        </leaf>
      </container>
      <container name="trusted-ca-certs">
        <description>
          <text>A list of Certificate Authority (CA) certificates that a
NETCONF server can use to authenticate a NETCONF client's
certificate. A client's certificate is authenticated if
its Issuer matches one of the configured trusted CA
certificates.</text>
        </description>
        <leaf-list name="trusted-ca-cert">
          <type name="binary"/>
          <description>
            <text>The binary certificate structure (DER) encoded
 in base64.</text>
          </description>
        </leaf-list>
      </container>
      <container name="trusted-client-certs">
        <description>
          <text>A list of client certificates that a NETCONF server can
use to authenticate a NETCONF client's certificate.  A
client's certificate is authenticated if it is an exact
match to one of the configured trusted client certificates.</text>
        </description>
        <leaf-list name="trusted-client-cert">
          <type name="binary"/>
          <description>
            <text>The binary certificate structure (DER) encoded
 in base64.</text>
          </description>
        </leaf-list>
      </container>
      <leaf name="crl-dir">
        <type name="string"/>
        <description>
          <text>The directory to search for Certificate Revocation List
 certificates.</text>
        </description>
      </leaf>
      <container name="cert-maps">
        <description>
          <text>The cert-maps container is used by a NETCONF server to
map the NETCONF client's presented X.509 certificate to
a NETCONF username.

If no matching and valid cert-to-name list entry can be
found, then the NETCONF server MUST close the connection,
and MUST NOT accept NETCONF messages over it.</text>
        </description>
        <uses name="x509c2n:cert-to-name"/>
      </container>
    </container>
    <container name="modules">
      <if-feature name="dynamic-modules"/>
      <list name="module">
        <key value="name"/>
        <leaf name="name">
          <type name="string"/>
          <description>
            <text>Name of a module.</text>
          </description>
        </leaf>
        <leaf name="enabled">
          <type name="boolean"/>
          <mandatory value="true"/>
          <description>
            <text>Specify whether or not the module is allowed to be managed over server.</text>
          </description>
        </leaf>
      </list>
    </container>
  </container>
  <rpc name="netopeer-reboot">
    <description>
      <text>Operation allowing privileged user to restart netopeer-server.</text>
    </description>
    <input>
      <leaf name="type">
        <type name="enumeration">
          <enum name="soft"/>
          <enum name="hard"/>
        </type>
        <default value="soft"/>
        <description>
          <text>Soft restart only unplugs all device modules and reloads configuration.
Hard restart also abort all connections and reload the binary.</text>
        </description>
      </leaf>
    </input>
  </rpc>
  <rpc name="reload-module">
    <if-feature name="dynamic-modules"/>
    <description>
      <text>Unload and load any loaded module.</text>
    </description>
    <input>
      <leaf name="module">
        <type name="leafref">
          <path value="/netopeer/modules/module/name"/>
        </type>
        <mandatory value="true"/>
        <description>
          <text>Name of module to reload.</text>
        </description>
      </leaf>
    </input>
  </rpc>
</module>
